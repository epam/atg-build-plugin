/*
 * Copyright 2019 EPAM SYSTEMS INC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            url "https://oss.sonatype.org/content/groups/staging"
        }
    }
    
    dependencies {
        classpath "com.epam.dep.esp:atg-build-plugin:${atgPluginVersion}"
    }
}

apply plugin: 'atg'

subprojects {
    ext.scanManifest = false
    
    apply plugin: 'java'
    apply plugin: 'atg'

    configurations {
        compile.extendsFrom atgClassPath
    }

    jar.enabled = false
    
    sourceSets {
        main {
            java {
                srcDirs = ['src']
                outputDir = file("build/libs/classes.jar/")
            }
            resources.srcDirs = ['resources']
            output.resourcesDir = file("build/libs/resources.jar/")
        }
    }

    clean {
        delete sourceSets.main.java.outputDir
        delete sourceSets.main.output.resourcesDir
    }
    artifacts {
        compile(file("${projectDir}/lib/classes.jar"))
    }
    atg {
        dependenciesSinkPath "build/dependencies"
        manifestConfig {
            manifestVersion "1.0"
            generateAtgClientClassPath true
            generateIndividualResources true
            
            atgConfigPath "config"
            skipGeneration false
            override true
            manifestFilePath "META-INF/MANIFEST.MF"
        }
    }
}

project(":ModuleA") {
    atg {
        dependenciesTreeOutputFile = file("build/atg-dependencies.txt")
        manifestConfig {
            atgProduct "RootModule.ModuleA"
        }
    }
    dependencies {
        atgRequiredCompile "DAS", "DPS"
        atgClassPath 'com.google.guava:guava:16.0.1'
    }
    description = 'Project - Module A'
}

project(":ModuleB") {
    atg.manifestConfig {
        atgProduct "RootModule.ModuleB"
    }
    dependencies {
        atgRequiredCompile "RootModule.ModuleA"
    }
}


task buildEAR(type: RunAssembler) {
    mustRunAfter subprojects*.classes
    mustRunAfter subprojects.collect { it.identityPath.toString() + ":dependenciesSink" }
    mustRunAfter subprojects.collect { it.identityPath.toString() + ":generateAtgManifest" }
    
    modules = ['DAS', 'RootModule.ModuleA']
    earName = 'ModuleAServer'
    outputDir = "${atgRoot}/home/cimEars"
    cleanOnBuild = project.hasProperty("cleanOnBuild")
    options {
        server = 'ModuleAServer'
        standalone = project.hasProperty("standalone")
        liveConfig = project.hasProperty("liveConfig")
    }
}

task myReleaseBuild() {
    dependsOn subprojects.collect { it.identityPath.toString() + ":dependenciesSink" }
    dependsOn subprojects.collect { it.identityPath.toString() + ":generateAtgManifest" }
    dependsOn subprojects*.classes
    dependsOn "buildEAR"
}


